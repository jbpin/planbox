// Generated by CoffeeScript 1.4.0
(function() {
  var planbox;

  planbox = {
    Model: {},
    Collection: {},
    View: {},
    contacts: {},
    contact_view: {},
    socket: {},
    init: function() {
      this.contacts = new this.Collection.Contact();
      this.contact_view = new this.View.Contact({
        collection: this.contacts,
        el: $("#list")
      });
      return this.contacts.fetch();
    }
  };

  $(document).ready(function() {
    var socket;
    planbox.init();
    socket = io.connect(window.location);
    socket.on('connected', function(data) {
      return console.log(data);
    });
    socket.on('reloadphone', function(data) {
      var ph;
      console.log("data reload");
      ph = planbox.contact_view.getPhoneCol(data.contact_id);
      if (ph) {
        return ph.fetch();
      }
    });
    socket.on('reloadcontact', function(data) {
      var ph;
      return ph = planbox.contacts.fetch();
    });
    return planbox.socket = socket;
  });

  planbox.Model.Contact = Backbone.Model.extend({
    urlRoot: "/contact",
    validate: function(attrs) {
      if (!attrs.firstname || !attrs.lastname) {
        return "You must provide a firstname and a lastname";
      }
      if (attrs.firstname === "" || attrs.lastname === "") {
        return "You must provide a firstname and a lastname";
      }
    },
    getPhoneNumbers: function() {
      var ph;
      ph = new planbox.Collection.PhoneNumber([], {
        contactid: this.get("id")
      });
      return ph;
    }
  });

  planbox.Model.PhoneNumber = Backbone.Model.extend({
    validate: function(attrs) {
      if (!attrs.name || !attrs.number) {
        return "name and number are mandatory";
      }
      if (attrs.name === "" || attrs.name === "") {
        return "name and number must not be null";
      }
    }
  });

  planbox.Collection.Contact = Backbone.Collection.extend({
    model: planbox.Model.Contact,
    url: "/contact"
  });

  planbox.Collection.PhoneNumber = Backbone.Collection.extend({
    initialize: function(models, options) {
      return this.contactid = options.contactid;
    },
    model: planbox.Model.PhoneNumber,
    url: function() {
      return "/contact/" + this.contactid + "/phonenumber";
    }
  });

  planbox.View.Contact = Backbone.View.extend({
    template: '',
    fn: '',
    errorbox: '',
    phoneCols: [],
    initialize: function() {
      var ctx, load;
      this.errorbox = $("#error");
      this.errorbox.remove();
      ctx = this;
      this.collection.on("all", this.render, this);
      load = $.get('/template/contact.jade.js');
      return load.fail(function(req, settings, exception) {
        if (req.status === 200) {
          ctx.template = req.responseText;
          return ctx.fn = jade.compile(ctx.template);
        }
      });
    },
    events: {
      "click a.contact": "open",
      "click #add #save": "save",
      "click .delete-contact": "remove"
    },
    getPhoneCol: function(id) {
      return this.phoneCols[id];
    },
    render: function() {
      return this.$el.find("#contacts").html(this.fn({
        contacts: this.collection.toJSON()
      }));
    },
    open: function(e) {
      var el, id, item, name, ph;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      item = this.collection.get(id);
      name = item.get("firstname");
      el = $("#phone" + item.get('id'));
      if (el.hasClass('in')) {
        return el.collapse('hide');
      } else {
        if (!this.phoneCols[item.get('id')]) {
          ph = item.getPhoneNumbers();
          new planbox.View.PhoneNumber({
            el: el,
            collection: ph,
            contactid: id
          });
          this.phoneCols[item.get('id')] = ph;
        } else {
          ph = this.phoneCols[item.get('id')];
          this.collection.fetch();
        }
        return ph.fetch().success(function() {
          el.collapse('toggle');
          return console.log(ph);
        });
      }
    },
    save: function(e) {
      var contact, fname, lname;
      fname = $("#inputFirstname");
      lname = $("#inputLastname");
      contact = this.collection.create({
        firstname: lname.val(),
        lastname: fname.val()
      }, {
        wait: true
      });
      if (contact) {
        fname.val("");
        lname.val("");
        this.errorbox.remove();
        $("#add").collapse('hide');
        this.collection.fetch();
        return planbox.socket.emit("actioncontact", {
          msg: "new contact"
        });
      } else {
        return $("#add").prepend(this.errorbox);
      }
    },
    remove: function(e) {
      var id, item;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      item = this.collection.get(id);
      return item.destroy({
        wait: true,
        success: function() {
          return planbox.socket.emit("actioncontact", {
            msg: "remove contact"
          });
        }
      });
    }
  });

  planbox.View.PhoneNumber = Backbone.View.extend({
    template: '',
    fn: '',
    errorbox: '',
    contactid: '',
    initialize: function() {
      var ctx, load;
      ctx = this;
      this.collection.on("all", this.render, this);
      load = $.get('/template/number.jade.js');
      return load.fail(function(req, settings, exception) {
        if (req.status === 200) {
          ctx.template = req.responseText;
          return ctx.fn = jade.compile(ctx.template);
        }
      });
    },
    events: {
      "click .add": "add",
      "click .delete": "remove",
      "click .edit-btn": "edit",
      "click .cancel": "cancel",
      "click .save": "save"
    },
    render: function() {
      this.$el.html(this.fn({
        numbers: this.collection.toJSON()
      }));
      this.errorbox = this.$el.find("#error");
      return this.errorbox.remove();
    },
    add: function(e) {
      var name, number, ph;
      name = this.$el.find("#addphone #inputName");
      number = this.$el.find("#addphone #inputNumber");
      ph = this.collection.create({
        name: name.val(),
        number: number.val()
      }, {
        wait: true
      });
      if (ph) {
        name.select(0);
        number.val("");
        this.collection.fetch();
        return planbox.socket.emit("actionphone", {
          id: this.options.contactid
        });
      } else {
        return this.$el.find("#addphone").prepend(this.errorbox).show();
      }
    },
    remove: function(e) {
      var id, item;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      item = this.collection.get(id);
      item.destroy({
        wait: true
      });
      this.collection.fetch();
      return planbox.socket.emit("actionphone", {
        id: this.options.contactid
      });
    },
    edit: function(e) {
      var div, id;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      div = this.$el.find("div[data-id=" + id + "]");
      div.find(".show").hide();
      return div.find(".edit").show();
    },
    cancel: function(e) {
      var div, id;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      div = this.$el.find("div[data-id=" + id + "]");
      div.find(".edit").hide();
      return div.find(".show").show();
    },
    save: function(e) {
      var div, id, item, number;
      e.preventDefault();
      id = $(e.currentTarget).data("id");
      div = this.$el.find("div[data-id=" + id + "]");
      item = this.collection.get(id);
      number = $("#inputNumber");
      if (item.save({
        number: number.val()
      })) {
        div.find(".edit").hide();
        div.find(".show").show();
        number.val("");
        return planbox.socket.emit("actionphone", {
          id: this.options.contactid
        });
      } else {
        div.prepend(this.errorbox);
        return console.log(this.errorbox);
      }
    }
  });

}).call(this);
